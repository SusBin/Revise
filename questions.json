[
  {
    "Id": 1,
    "CourseName": "Introduction to Data Structures and Algorithms",
    "CourseCode": "F28SG",
    "Topics": [
      {
        "Topic": "Assertions",
        "Questions": [
          {
            "Id": 4,
            "Question": "What annotation is used above a JUnit test method?",
            "Answers": [
              {
                "Text": "Test Development Decisions",
                "IsCorrect": false
              },
              {
                "Text": "/* Test */",
                "IsCorrect": false
              },
              {
                "Text": "// Test",
                "IsCorrect": false
              },
              {
                "Text": "@Test",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 5,
            "Question": "What should test methods return?",
            "Answers": [
              {
                "Text": "1",
                "IsCorrect": false
              },
              {
                "Text": "-1",
                "IsCorrect": false
              },
              {
                "Text": "any integer",
                "IsCorrect": false
              },
              {
                "Text": "void",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 6,
            "Question": "How many arguments should a test method take?",
            "Answers": [
              {
                "Text": "2",
                "IsCorrect": false
              },
              {
                "Text": "At least 1",
                "IsCorrect": false
              },
              {
                "Text": "0",
                "IsCorrect": true
              },
              {
                "Text": "Exactly 1",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 7,
            "Question": "Select all good unit test design approaches",
            "Answers": [
              {
                "Text": "test the output of a method",
                "IsCorrect": true
              },
              {
                "Text": "test boundary conditions",
                "IsCorrect": true
              },
              {
                "Text": "test edge cases",
                "IsCorrect": true
              },
              {
                "Text": "test error conditions",
                "IsCorrect": true
              }
            ]
          }
        ]
      },
      {
        "Topic": "Complexity",
        "Questions": [
          {
            "Id": 8,
            "Question": "complexity of: n log n \u002B 5 log n \u002B 3n \u002B 5",
            "Answers": [
              {
                "Text": "ON log N",
                "IsCorrect": true
              },
              {
                "Text": "O3N",
                "IsCorrect": false
              },
              {
                "Text": "ON",
                "IsCorrect": false
              },
              {
                "Text": "O6 log N",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 9,
            "Question": "complexity of: n^2 \u002B n log n - 2n",
            "Answers": [
              {
                "Text": "ON^2",
                "IsCorrect": true
              },
              {
                "Text": "ON log N",
                "IsCorrect": false
              },
              {
                "Text": "ON",
                "IsCorrect": false
              },
              {
                "Text": "O2N",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 10,
            "Question": "Simplify 34 in Big-O notation",
            "Answers": [
              {
                "Text": "O(N)",
                "IsCorrect": false
              },
              {
                "Text": "O(1)",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 11,
            "Question": "complexity of: log n \u002B 5",
            "Answers": [
              {
                "Text": "O(5)",
                "IsCorrect": false
              },
              {
                "Text": "O(1)",
                "IsCorrect": false
              },
              {
                "Text": "O(N)",
                "IsCorrect": false
              },
              {
                "Text": "O(log N)",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 12,
            "Question": "complexity of: n^3 \u002B 2^n \u002B 100",
            "Answers": [
              {
                "Text": "O(1)",
                "IsCorrect": false
              },
              {
                "Text": "O(N^3)",
                "IsCorrect": false
              },
              {
                "Text": "O(2^N)",
                "IsCorrect": true
              },
              {
                "Text": "O(N^3 \u002B 2^N)",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 13,
            "Question": "What is the complexity of reading a book stat to end?",
            "Answers": [
              {
                "Text": "O(N^2)",
                "IsCorrect": false
              },
              {
                "Text": "O(log N)",
                "IsCorrect": false
              },
              {
                "Text": "O(N)",
                "IsCorrect": true
              },
              {
                "Text": "O(1)",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 14,
            "Question": "Select all Java primitives that count towards Big-O abstraction",
            "Answers": [
              {
                "Text": "assignment",
                "IsCorrect": true
              },
              {
                "Text": "calling a method",
                "IsCorrect": true
              },
              {
                "Text": "indexing into an array",
                "IsCorrect": true
              },
              {
                "Text": "the name of a variable",
                "IsCorrect": false
              },
              {
                "Text": "comparison",
                "IsCorrect": true
              }
            ]
          }
        ]
      },
      {
        "Topic": "Stacks (with arrays)",
        "Questions": [
          {
            "Id": 15,
            "Question": "ADT stands for",
            "Answers": [
              {
                "Text": "Anonymous Data Type",
                "IsCorrect": false
              },
              {
                "Text": "Algebraic Data Target",
                "IsCorrect": false
              },
              {
                "Text": "Abstract Data Type",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 16,
            "Question": "Select all examples of stacks",
            "Answers": [
              {
                "Text": "Queuing at an airport",
                "IsCorrect": false
              },
              {
                "Text": "A queue of printer jobs",
                "IsCorrect": false
              },
              {
                "Text": "\u0022undo\u0022 button in a text editor",
                "IsCorrect": true
              },
              {
                "Text": "Stack of trays in a coffee shop",
                "IsCorrect": true
              },
              {
                "Text": "Pile of T-shirts in a wardrobe",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 17,
            "Question": "How do you add data to a stack?",
            "Answers": [
              {
                "Text": "pop()",
                "IsCorrect": false
              },
              {
                "Text": "add()",
                "IsCorrect": false
              },
              {
                "Text": "push()",
                "IsCorrect": true
              },
              {
                "Text": "top()",
                "IsCorrect": false
              },
              {
                "Text": "size()",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 18,
            "Question": "What happens if you pop() an empty stack?",
            "Answers": [
              {
                "Text": "returns void",
                "IsCorrect": false
              },
              {
                "Text": "returns false",
                "IsCorrect": false
              },
              {
                "Text": "throws StackException",
                "IsCorrect": true
              },
              {
                "Text": "returns top object and returns its value",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 19,
            "Question": "A Stack is a LIFO structure. What does LIFO mean?",
            "Answers": [
              {
                "Text": "Late Input First Output",
                "IsCorrect": false
              },
              {
                "Text": "First In Last Out",
                "IsCorrect": false
              },
              {
                "Text": "Last In First Out",
                "IsCorrect": true
              },
              {
                "Text": "First In Last Out",
                "IsCorrect": false
              },
              {
                "Text": "First In First Out",
                "IsCorrect": false
              }
            ]
          },
          {
            "Id": 20,
            "Question": "What does isEmpty() on a stack do?",
            "Answers": [
              {
                "Text": "empties the stack",
                "IsCorrect": false
              },
              {
                "Text": "returns the top element",
                "IsCorrect": false
              },
              {
                "Text": "pops the top element",
                "IsCorrect": false
              },
              {
                "Text": "returns the size of the stack",
                "IsCorrect": false
              },
              {
                "Text": "returns true if there are no elements in the stack, false otherwise",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 21,
            "Question": "Where do you write the implementation of a stack?",
            "Answers": [
              {
                "Text": "In the Java Interface file",
                "IsCorrect": false
              },
              {
                "Text": "In the Java Class file",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 22,
            "Question": "What is a limitation of using array to implement stacks",
            "Answers": [
              {
                "Text": "Array lookups are very fast",
                "IsCorrect": false
              },
              {
                "Text": "Array lookups are very slow",
                "IsCorrect": false
              },
              {
                "Text": "Array operations are computationally complex",
                "IsCorrect": false
              },
              {
                "Text": "They have a fixed sized structure limiting the size of the stack",
                "IsCorrect": true
              }
            ]
          }
        ]
      },
      {
        "Topic": "Recursion",
        "Questions": [
          {
            "Id": 23,
            "Question": "A recursive method is:",
            "Answers": [
              {
                "Text": "A for loop",
                "IsCorrect": false
              },
              {
                "Text": "A method that calls itself",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 24,
            "Question": "In a recursive method, a base case:",
            "Answers": [
              {
                "Text": "recursively calls the method",
                "IsCorrect": false
              },
              {
                "Text": "throws an exception",
                "IsCorrect": false
              },
              {
                "Text": "returns a value from the method",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 13,
            "Question": "In a recursive method, a recursive case:",
            "Answers": [
              {
                "Text": "returns a value from the method",
                "IsCorrect": false
              },
              {
                "Text": "recursively calls the method",
                "IsCorrect": true
              }
            ]
          },
          {
            "Id": 25,
            "Question": "Select all recursive methods",
            "Answers": [
              {
                "Text": "public int length(String str){\n\tif (str.isEmpty()) {\n\t\treturn 0;\n\t} else {\n\t\treturn 1 + length(str.substring(1));\n\t}\n}",
                "IsCorrect": true
              },
              {
                "Text": "public int sum(int[] arr){\n\tint x = 0;\n\tfor (int i=0; i<arr.length; i++) {\n\t\tx = arr[i];\n\t}\n\treturn x;\n}",
                "IsCorrect": false
              },
              {
                "Text": "public int sum(int[] arr, int idx, int accum){\n\tif (arr.length == idx) {\n\t\treturn accum;\n\t} else {\n\t\treturn sum(arr, idx+1, accum+arr[idx]);\n\t}\n}",
                "IsCorrect": true
              }
            ]
          }
        ]
      }
    ]
  }
]